<?php

/**
 * @file
 * Contains unity_internal_link_checker.module.
 */

use Drupal\Core\Entity\ContentEntityInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Field\FieldItemListInterface;

/**
 * Implements hook_entity_presave().
 */
function unity_internal_link_checker_entity_presave(EntityInterface $entity) {
  // If this hook has been invoked from a migration, bail out.
  $page = \Drupal::request()->getRequestUri();
  if (preg_match('|^\/batch|', $page) || ($page == '/')) {
    return;
  }
  if ($entity instanceof ContentEntityInterface) {
    if ($entity->hasField('body')) {
      $body = $entity->get('body')->value ?? '';
      $format = $entity->get('body')->format ?? '';
      // Get list of urls to exclude (these have been added at /admin/config/unity_internal_link_checker/link_checker_form).
      $config = \Drupal::config('unity_internal_link_checker.linksettings');
      // Make sure the array items are clean.
      $exclude_list_bare = $config->get('site_url_list_exclude');
      if (!empty($exclude_list_bare)) {
        $exclude_url_list = preg_split('/\r\n|\r|\n/', $config->get('site_url_list_exclude'));
      } else {
        $exclude_url_list = [];
      }
      $matches = [];
      // Look for all anchors in the body field.
      if (preg_match_all('|href\=[\'"]+([^ >"\']*)[\'"]+[^>]*>|', $body, $matches)) {
        if (count($matches) > 1) {
          foreach ($matches[1] as $original_link) {
            // If we have any URL's to exclude then don't convert to a relative URL.
            if (!in_array($original_link, $exclude_url_list)) {
              // So we have an anchor, does it look like a relative link
              // or an absolute?
              $matches2 = [];
              if (preg_match('|http://(.*)|', $original_link, $matches2) ||
                preg_match('|https://(.*)|', $original_link, $matches2)) {
                // This is an absolute URL does it match one of the domain names specified
                // at /admin/config/unity_internal_link_checker/link_checker_form ?
                $body = unity_internal_link_checker__convert_absolute_link($body, $original_link);
              }
            }
          }
          $entity->set('body', ['value' => $body, 'format' => $format]);
        }
      }
    }
  }
}

/**
 * Utility function to convert internal link to relative.
 */
function unity_internal_link_checker__convert_absolute_link(&$body_text, $original_link) {
  // Get list of urls to replace
  // (these have been added at
  // /admin/config/unity_internal_link_checker/link_checker_form )
  $config = \Drupal::config('unity_internal_link_checker.linksettings');
  $replace_url_list = unity_internal_link_checker__urls_to_replace();
  $site_url_list = $config->get('site_url_list');
  if (!empty($site_url_list)) {
    $replace_url_list .= $site_url_list;
  }
  if (strlen($replace_url_list) == 0) {
    \Drupal::messenger()
      ->addMessage(t("Please set some URLs at /admin/config/unity_internal_link_checker/link_checker_form"), "error");
    return $body_text;
  }
  $replace_url_list = explode(PHP_EOL, $replace_url_list);
  // Remove empty array items.
  $replace_url_list = array_filter($replace_url_list);
  foreach ($replace_url_list as $replace_url) {
    // Make sure url is 'clean'.
    $replace_url = str_replace(["\n", "\t", "\r"], '', $replace_url);
    // Make sure that there is a trailing slash.
    if (!preg_match('|\/$|', $replace_url)) {
      $replace_url .= '/';
    }
    // Does the start of this link match one of the
    // urls that we are looking for ?
    if (str_contains($original_link, $replace_url)) {
      // We have a match, change this absolute link to a relative link. Only target href values.
      $body_text = preg_replace('~href\=[\'"]+' . $replace_url . '~', 'href="/', $body_text, 1);
    }
  }
  return $body_text;
}

/**
 * Utility function to add all domains and extensions for the current site.
 */
function unity_internal_link_checker__urls_to_replace(): string {
  // Get the host name of the site and remove the domain extension.
  $host = \Drupal::request()->getHost();
  if (preg_match('/\S*?\.(gov.uk|org.uk|co.uk|com|net|eu|org)/', $host, $matches)) {
    $host = $matches[0];
  }
  // Strip 'www' from hostname.
  $host = str_replace('www.', '', $host);
  // List all domain protocols and extensions for our platform and local environments.
  $protocols = ['http://', 'http://www.', 'https://', 'https://www.'];
  $extensions = [
    '.lndo.site/',
    '/',
    // Unity 1 platform environments.
    '.edge-uhfrady-6tlkpwbr6tndk.uk-1.platformsh.site/',
    '.d8un-uat-qhl74ni-6tlkpwbr6tndk.uk-1.platformsh.site/',
    '.main-bvxea6i-6tlkpwbr6tndk.uk-1.platformsh.site/',
    // Unity 2 platform environments.
    '.edge-uhfrady-kamkoebtv74zm.uk-1.platformsh.site/',
    '.uat-nvcvooy-kamkoebtv74zm.uk-1.platformsh.site/',
    '.main-bvxea6i-kamkoebtv74zm.uk-1.platformsh.site/',
  ];
  $urls_to_replace = '';
  // Loop through and add all protocols and extensions to the current site.
  foreach ($protocols as $protocol) {
    foreach ($extensions as $extension) {
      $urls_to_replace .= $protocol . $host . $extension . "\r\n";
    }
  }
  return $urls_to_replace;
}
