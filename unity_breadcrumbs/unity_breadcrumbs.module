<?php

/**
 * @file
 * Contains unity_breadcrumbs.module.
 */

use Drupal\Core\Breadcrumb\Breadcrumb;
use Drupal\Core\Link;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\StringTranslation\TranslatableMarkup;
use Drupal\Core\Url;
use Drupal\node\NodeInterface;

/**
 * Implements hook_system_breadcrumb_alter().
 *
 * Altering the search view page breadcrumbs, when facets are selected the
 * breadcrumb trail is overwritten.
 */
function unity_breadcrumbs_system_breadcrumb_alter(Breadcrumb &$breadcrumb, RouteMatchInterface $route_match, array $context) {
  $links = $breadcrumb->getLinks();

  if (!empty($links)) {
    // Loop through the links for links that have facet queries added to them and unset the link of the last breadcrumb.
    // The facets module breadcrumb links them all by default.
    foreach ($links as $link) {
      $link_text_raw = $link->getText();

      if ($link_text_raw instanceof TranslatableMarkup) {
        $link_text = $link_text_raw->render();
      }
      elseif (is_array($link_text_raw) && isset($link_text_raw['#markup'])) {
        $link_text = $link_text_raw['#markup'];
      }
      else {
        $link_text = $link_text_raw;
      }

      // Strip the - search results text from the page title breadcrumb link.
      if (preg_match('/([A-Z|a-z]+) - search results/', $link_text, $matches)) {
        $link->setText($matches[1]);
      }
      if ($link->getUrl()->isRouted()) {
        $params = $link->getUrl()->getRouteParameters();
        if (!empty($params['facets_query'])) {
          // Remove link from the last breadcrumb link.
          end($links)->setUrl(Url::fromRoute('<none>'));
          $breadcrumb = new Breadcrumb();
          $breadcrumb->setLinks($links);
          $breadcrumb->addCacheContexts(['url.path']);
        }
      }
    }
  }

  $node = \Drupal::routeMatch()->getParameter('node');

  if ($node instanceof NodeInterface  && $node->hasField('book')) {
    // Append the page title to the end of Book pages.
    if ($node->get('book')) {
      $request = \Drupal::request();
      $title = \Drupal::service('title_resolver')
        ->getTitle($request, $route_match->getRouteObject());
      $link = Link::createFromRoute($title, '<none>');
      $breadcrumb->addLink($link);
      $breadcrumb->addCacheContexts(['route.book_navigation']);
    }
  }
}
